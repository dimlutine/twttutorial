Virtual Environments:

cd to folder

#to see libs
pip list

#shows which python is being used
which python

#install virtual enviroment
sudo apt install python3.8-venv

#creates the venv
python3 -m venv projectname_env

#deletes venv completely
rm -rf projectname_env/

#'logs into' venv
source projectname_env/bin/activate
#'logs out of' venv
deactivate


requirements.text info:

#creates requirements.txt
pip freeze > requirements.txt 
#installs from requirements.txt
pip install -r requirements.txt 

#be sure to gitignore the whole venv but keep requirements.txt



Django Tutorial:

cd to dir
pip install Django
#intitializes the project where projectname is the name of the project
django-admin startproject projectname

#run local machine server
cd to project dir


python manage.py runserver
#add port number to end to run on specific port
#python manage.py runserver 8080

Create an app:
python manage.py startapp main

Editing the site:
#views
main/views.py

touch urls.py in main/
#urls
main/urls.py

create paths in projectname\urls.py #different than main/urls.py, this directs to main/urls where the urls were live
    path('', include("main.urls")),

Databases:
#get db shell
python manage.py shell

modify settings.py from projectname/settings.py
    add 
        'main.apps.MainConfig',
    to INSTALLED_APPS

cd to projectname directory
python manage.py migrate

#models
projectname/models.py

#After we modify our models we need to tell django that we've done so
be in same dir

python manage.py makemigrations main
python manage.py migrate
# can be checked in migrations/0001_initial.py

add stuff to db:
from main.models import Item, ToDoList
t = ToDoList(name="dim\'s list")
t.save()
ToDoList.objects.all() #to see all objects
ToDoList.objects.get(id=1) #to see object at id 1
ToDoList.objects.get(name="dim's list") #same as above by by name instead of id

t.item_set.all() #provides empty QuerySet
t.item_set.create(text="Go to the mall", complete=False) #create item that says 'Go to the mall'

db queries:
t = ToDoList.objects
t.filter(name__startswith="dim") #returns QuerySet starting with 'dim'
t.filter(id=1) #returns QuerySet with id of 1
del_object = t.get(id=1)
del_object.delete() #deletes object with id of 1

admin dashboard:
python manage.py createsuperuser

give dashboard access to db:
#import models to projectname/admin.py
from .models import ToDoList, Item

admin.site.register(ToDoList)
admin.site.register(Item)

Adding home path to main/urls.py:
path("", views.home, name="home")

and in views.py
def home(response):
    pass

create directory for templates main/templates/main
touch base.html
touch home.html

#to take everything from base.html and add it to home.html
{% extends 'main/base.html %}

#change return of index in views.py to
return render(response, "main/base.html", {})
#same with home to home/base.html

#use variables in the views
#in pagename.html
{{ variablename }} 
#in views.py
return render(response, "main/base.html", {"variablename":value})

#content block in base.html
<div id="content", name="content">
{% block content %}
default content goes here, but can be blank
{% endblock %}
</div>

#content block in home.html
{% block content %}
<h1>Home Page</h1>
{% endblock %}

create list.html

For Loops:
    {% block content %}
        <h1>{{ ls.name }}</h1>
        <ul>
            {% for item in ls.item_set.all %}
                <li>{{item.text}}</li>
            {% endfor %}
    </ul>
    {% endblock %}

If Statements:
    {% if item.complete == False %}
        <li>{{item.text}} - INCOMPLETE</li>
    {% else %}
        <li>{{item.text}} - COMPLETE</li>
    {% endif %}

Forms:
#set up path to new page in urls.py
path("create/", views.create, name="create"),

#create function in views.py
    def create(response):
    return render(response, "main/create.html", {})

#create create.html just like any other page

#add the html for forms, but use {{form}}
    <form action="/create/" method="post">
    {{form}}
    <button type="submit", name=""save">Create New</button>

    </form>
#default form layout
{{form.as_table}}
{{form.as_p}}
{{form.as_ul}}

#touch forms.py inside main
#create Class for forms inside forms.py
    class CreateNewList(forms.Form):
        name = forms.CharField(label="Name", max_length=200)
        check = forms.BooleanField()

#import Class from .forms into views.py and add forms var for create func
    def create(response):
        form = CreateNewList
        return render(response, "main/create.html", {"form":form})

#make the thing optional
    check = forms.BooleanField(required=False)

#csrf error - whenever we create forms we want to include the following above {{forms}}
    {% csrf_token %}

POST vs GET:
    You can do anything with GET that you can do with POST
    POST encrpyts
    Use GET to retrieve info that doesn't need security
    GET puts the plain text in the URL
        good for bookmarking I guess?

    POST and GET are passed through the 'response' variable to view
        if response.method == "POST":
            form = CreateNewList(response.POST) #holds all of the info from the form in a dictionary
            if form.is_valid():
                n = form.cleaned_data["name"]
                t = ToDoList(name=n)
                t.save()
        else:
            form = CreateNewList()

#Redirect from form data:
    from django.http import HttpResponse, HttpResponseRedirect
    return HttpResponseRedirect(f"/{t.id}")

#Add checkbutton, name is c + id
    <li><input type="checkbox", value="clicked",name="c{{item.id}}">{{item.text}}</li>

#Saving the check buttons logic
    if response.POST.get("save"):
            for item in ls.item_set.all():
                if response.POST.get("c" + str(item.id)) == "clicked":
                    item.complete == True
                else:
                    item.complete == False

#Saving item logic
    elif response.POST.get("newItem"):
            txt = response.POST.get("new")

            if len(txt) > 2:
                ls.item_set.create(text=txt, complete=False)
            else:
                print("invalid")

Add Sidebar:
#in base.html set up a div in the body
    <div class="sidenav">
        <a href="/home">Home</a>
        <a href="/create">Create</a>
        <a href="/2">View</a>
    </div>

#add main class to content div
#style as you'd like